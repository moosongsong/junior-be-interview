(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{330:function(t,e,r){"use strict";r.r(e);var l=r(13),s=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"페이지-교체-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#페이지-교체-알고리즘"}},[t._v("#")]),t._v(" 페이지 교체 알고리즘")]),t._v(" "),e("p",[t._v("메모리는 한정되어 있기 때문에 스와핑이 발생합니다. 스와핑이 자주 발생하면 성능저하가 일어나기 때문에 페이지 교체 알고리즘을 기반으로 스와핑이 많이 일어나지 않도록 설계해야 합니다.")]),t._v(" "),e("h2",{attrs:{id:"오프라인-알고리즘-offline-algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#오프라인-알고리즘-offline-algorithm"}},[t._v("#")]),t._v(" 오프라인 알고리즘(Offline Algorithm)")]),t._v(" "),e("blockquote",[e("p",[t._v("앞으로 가장 오랫동안 사용되지 않은 페이지부터 먼저 교체하는 알고리즘이며 가장 좋은 방식입니다.")])]),t._v(" "),e("ul",[e("li",[t._v("앞으로 어떤 페이지가 사용될 지 미리 알 수 없으니 실제 구현이 불가능한 알고리즘입니다.")]),t._v(" "),e("li",[t._v("이론상 최적의 알고리즘이기 때문에, 다른 알고리즘과의 성능 비교에 대한 기준을 제공하는 역할입니다.")]),t._v(" "),e("li",[t._v("Optimal Algorithms 이라고도 부릅니다.")])]),t._v(" "),e("h2",{attrs:{id:"fifo-first-in-first-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifo-first-in-first-out"}},[t._v("#")]),t._v(" FIFO(First In First Out)")]),t._v(" "),e("blockquote",[e("p",[t._v("가장 먼저 온 페이지를 교체 영역에 가장 먼저 놓는 방법을 의미합니다.")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178172148-fba9d866-ff60-4a02-a4d3-83ae20b3356c.PNG",alt:"fifo"}})]),t._v(" "),e("ul",[e("li",[t._v("가장 단순한 알고리즘입니다.")]),t._v(" "),e("li",[t._v("FIFO Queue를 이용해 구현이 가능합니다.")]),t._v(" "),e("li",[t._v("멀티미디어 데이터로 인해 주목을 받았습니다.")]),t._v(" "),e("li",[t._v("구현이 간단하지만, 성능이 좋지 않은 편입니다.")]),t._v(" "),e("li",[t._v("페이지가 늘어남에도 불구하고 페이지 폴트가 증가하는 Belady's Anomaly가 발생할수도 있습니다.")])]),t._v(" "),e("h2",{attrs:{id:"lfu-least-frequently-used"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lfu-least-frequently-used"}},[t._v("#")]),t._v(" LFU(Least Frequently Used)")]),t._v(" "),e("blockquote",[e("p",[t._v("가장 참조 횟수가 적은 페이지를 교체하는 방식입니다. 쉽게 말해, 많이 사용되지 않는 것을 교체하는 것입니다.")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178172320-e5269f0f-3d15-4af3-93c9-11a03db10def.PNG",alt:"LFU"}})]),t._v(" "),e("ul",[e("li",[t._v("프로그램 실행 초기에 많이 사용된 페이지는, 그 후로 사용되지 않더라도 프레임을 계속 차지하는 문제가 있습니다.")])]),t._v(" "),e("h2",{attrs:{id:"lru-least-recently-used"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lru-least-recently-used"}},[t._v("#")]),t._v(" LRU(Least Recently Used)")]),t._v(" "),e("blockquote",[e("p",[t._v("가장 오랜 시간 참조되지 않은 페이지부터 교체하는 방법입니다.")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178172317-428162d1-11af-4f9d-92f6-c0fe4a3165b4.PNG",alt:"LRU"}})]),t._v(" "),e("ul",[e("li",[t._v("페이지 사용의 지역성을 고려하여, Optimal Algorithms과 유사하며 실제 구현이 가능한 알고리즘입니다.")]),t._v(" "),e("li",[t._v("구현 방법 : 오래된 것을 구별하기 위한 Counter와 Queue 사용합니다.\n"),e("ul",[e("li",[t._v("Counter : 참조된 시간을 기록합니다.")]),t._v(" "),e("li",[t._v("Queue : 한번 사용한 페이지를 큐의 가장 위로 이동시킵니다. (가장 최근에 사용된 페이지는 가장 위에 있고, 가장 오래전에 사용된 페이지는 가장 아래에 있습니다.)")])])])]),t._v(" "),e("h2",{attrs:{id:"nur-not-used-recently"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nur-not-used-recently"}},[t._v("#")]),t._v(" NUR(Not Used Recently)")]),t._v(" "),e("blockquote",[e("p",[t._v("최근에 접근하지 않은 페이지를 바꾸는 방법입니다.")])]),t._v(" "),e("ul",[e("li",[t._v("참조 bit(Reference bit)와 변형 bit(Modified Bit)를 사용합니다.")]),t._v(" "),e("li",[t._v("reference bit (최근에 참조된 경우에는 1, 최근에 참조되지 않은 경우에는 0)\n"),e("ul",[e("li",[t._v("최초로 프레임에 로드 될 때와 페이지가 참조되었을 때마다 1로 설정됩니다.")]),t._v(" "),e("li",[t._v("일정 주기바다 다시 0으로 리셋됩니다.")])])]),t._v(" "),e("li",[t._v("modified bit (wirte된 페이지는 1, 그렇지 않은 페이지는 0)\n"),e("ul",[e("li",[t._v("최초로 프레임에 로드 될때는 0으로 설정됩니다.")]),t._v(" "),e("li",[t._v("페이지의 내용이 바뀔때는 1로 설정됩니다.")])])]),t._v(" "),e("li",[t._v("페이지 교체가 필요한 시점에 다음 순서대로 교체 대상으로 삼습니다.\n"),e("ol",[e("li",[t._v("참조 0, 변형 0")]),t._v(" "),e("li",[t._v("참조 1, 변형 0")]),t._v(" "),e("li",[t._v("참조 0, 변형 1")]),t._v(" "),e("li",[t._v("참조 1, 변형 1")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("NUR과 유사한 알고리즘")]),t._v(" "),e("p",[e("strong",[t._v("SCR Algorithms(Second Chance Replacement Algorithms)")]),e("br"),t._v("\n: 변형 비트 없이 참조 비트만을 사용한다.")]),t._v(" "),e("p",[e("strong",[t._v("Clock Algorithms")]),e("br"),t._v("\n: 참조 비트를 사용하고 환형 큐를 사용하여 프레임을 관리한다.")])]),t._v(" "),e("h3",{attrs:{id:"참고자료"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),e("ul",[e("li",[t._v("주홍철."),e("em",[t._v("면접을 위한 CS 전공지식 노트")]),t._v(".서울:길벗,2022.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developyo.tistory.com/entry/OS-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-9-Memory-Management-2?category=752792",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEVELOPyo"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code-lab1.tistory.com/60",target:"_blank",rel:"noopener noreferrer"}},[t._v("코드연구소"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("숭실대학교 김영근 교수님의 운영체제 강의자료(2021)")])])])}),[],!1,null,null,null);e.default=s.exports}}]);