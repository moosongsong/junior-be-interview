(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{329:function(t,a,e){"use strict";e.r(a);var r=e(13),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"메모리-할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메모리-할당"}},[t._v("#")]),t._v(" 메모리 할당")]),t._v(" "),a("h2",{attrs:{id:"연속-할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#연속-할당"}},[t._v("#")]),t._v(" 연속 할당")]),t._v(" "),a("p",[t._v("메모리에 연속적으로 공간을 할당하는 방식")]),t._v(" "),a("h3",{attrs:{id:"고정-분할-방식-fixed-partition-allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#고정-분할-방식-fixed-partition-allocation"}},[t._v("#")]),t._v(" 고정 분할 방식(fixed partition allocation)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178170060-e2671979-3581-4496-bae1-08fdc56ff621.PNG",alt:"고정분할방식"}})]),t._v(" "),a("p",[t._v("메모리를 미리 나누어 관리하는 방식입니다. 메모리가 미리 나뉘어 있기 때문에 융통성이 없고, 내부 단편화가 발생합니다.")]),t._v(" "),a("h3",{attrs:{id:"가변-분할-방식-variable-partition-allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가변-분할-방식-variable-partition-allocation"}},[t._v("#")]),t._v(" 가변 분할 방식(variable partition allocation)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178170063-9ff4b480-c747-4251-bbb5-0fd687cd3587.PNG",alt:"가변분할방식"}}),a("br"),t._v("\n매 시점 프로그램의 크기에 맞게 동적으로 메모리를 나눠 사용합니다. 내부 단편화는 발생하지 않고 외부 단편화는 발생할 수 있습니다."),a("br"),t._v("\n최초적합(first fit), 최적적합(best fit), 최악적합(worst fit)이 있습니다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("이름")]),t._v(" "),a("th",[t._v("설명")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("최초적합")]),t._v(" "),a("td",[t._v("위쪽이나 아래쪽부터 시작해서 홀을 찾으면 바로 할당합니다.")])]),t._v(" "),a("tr",[a("td",[t._v("최적적합")]),t._v(" "),a("td",[t._v("프로세스의 크기 이상인 공간 중 가장 작은 홀부터 할당합니다.")])]),t._v(" "),a("tr",[a("td",[t._v("최악적합")]),t._v(" "),a("td",[t._v("프로세스의 크기와 가장 많이 차이가 나는 홀에 할당합니다.")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("용어")]),t._v(" "),a("p",[a("strong",[t._v("내부 단편화(internal fragmentation)")]),a("br"),t._v("\n: 메모리를 나눈 크기보다 프로그램이 작아서, 특정 프로그램에 배정되었지만 사용되지 않는 공간이 발생하는 현상")]),t._v(" "),a("p",[a("strong",[t._v("외부 단편화(external fragmentation)")]),a("br"),t._v("\n: 메모리를 나눈 크기보다 프로그램이 커서, 들어가지 못하는 공간이 많이 발생하는 현상. 예를 들어, 100MB를 55MB, 45MB로 나눴지만 프로그램의 크기는 70MB일 때 들어가지 못하는 것을 말합니다.")]),t._v(" "),a("p",[a("strong",[t._v("홀(hole)")]),a("br"),t._v("\n: 할당할 수 있는 비어있는 메모리 공간")])]),t._v(" "),a("h2",{attrs:{id:"불연속-할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#불연속-할당"}},[t._v("#")]),t._v(" 불연속 할당")]),t._v(" "),a("p",[t._v("메모리를 연속적으로 할당하지 않는 방식으로 현대 운영체제는 불연속 할당인 페이징 기법을 사용합니다.")]),t._v(" "),a("h3",{attrs:{id:"페이징-paging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#페이징-paging"}},[t._v("#")]),t._v(" 페이징(Paging)")]),t._v(" "),a("blockquote",[a("p",[t._v("동일한 크기의 페이지 단위로 나누어 메모리의 서로 다른 위치에 프로세스를 할당합니다.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178170531-2ce83409-5d86-405b-a17f-bf872c7acf87.PNG",alt:"페이징기법"}})]),t._v(" "),a("p",[t._v("보통 1Page의 크기는 4KB로 나누어 사용합니다. 각각의 프레임 크기와 페이지 크기는 같습니다. 페이지가 하나의 프레임을\n할당받으면 물리 메모리에 위치하게 되고 프레임을 할당받지 못한 페이지들은 외부 저장장치에 저장됩니다.")]),t._v(" "),a("p",[t._v("페이징 방법을 사용하면 페이지 테이블에 한번, 물리 메모리 내의 데이터에 한번 총 두번의 메모리 접근을 거쳐야합니다. 따라서 속도향상을 위해 TLB를 이용하여 메모리에 한번 접근하도록 합니다.")]),t._v(" "),a("p",[t._v("홀의 크기가 균일하지 않은 문제가 없어지지만 주소 변환이 복잡해집니다.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("페이지 테이블(Page Table)")]),t._v(" "),a("ul",[a("li",[t._v("각 프로세스의 페이지 정보를 저장하는 공간.(프로세스마다 하나의 페이지 테이블을 가집니다.)")]),t._v(" "),a("li",[t._v("물리 메모리에 위치하고 있습니다.")]),t._v(" "),a("li",[t._v("index는 페이지의 번호를 담고있습니다.")]),t._v(" "),a("li",[t._v("내용으로는 해당 페이지에 할당된 물리 메모리(프레임)의 시작 주소를 담고 있습니다.")]),t._v(" "),a("li",[t._v("내용에 들어 있는 시작 주소와 페이지 주소를 결합하여 원하는 데이터가 있는 물리 메모리 주소를 알아내는 방식입니다.")]),t._v(" "),a("li",[t._v("다단계 페이지 테이블을 만들 수도 있습니다.")])])]),t._v(" "),a("h3",{attrs:{id:"세그멘테이션-segmentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#세그멘테이션-segmentation"}},[t._v("#")]),t._v(" 세그멘테이션(Segmentation)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/178171319-78efed0a-60a7-4fa7-9c4a-71706dec827f.PNG",alt:"세그멘테이션"}})]),t._v(" "),a("p",[t._v("페이지 단위가 아닌 의미 단위인 세그먼트로 나누는 방식입니다.\n공유와 보안 측면에서 좋으며 홀 크기가 균일하지 않은 문제가 발생됩니다.")]),t._v(" "),a("h3",{attrs:{id:"페이지드-세그멘테이션-paged-segmentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#페이지드-세그멘테이션-paged-segmentation"}},[t._v("#")]),t._v(" 페이지드 세그멘테이션(Paged Segmentation)")]),t._v(" "),a("p",[t._v("공유나 보안을 의미 단위의 세그먼트로 나누고 물리적 메모리는 페이지로 나누는 것을 말합니다.")]),t._v(" "),a("h3",{attrs:{id:"참고자료"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),a("ul",[a("li",[t._v("주홍철."),a("em",[t._v("면접을 위한 CS 전공지식 노트")]),t._v(".서울:길벗,2022.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developyo.tistory.com/entry/OS-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-9-Memory-Management-2?category=752792",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEVELOPyo"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);