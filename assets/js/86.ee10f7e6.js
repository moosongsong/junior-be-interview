(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{349:function(t,a,v){"use strict";v.r(a);var s=v(13),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dao-dto-vo-차이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dao-dto-vo-차이"}},[t._v("#")]),t._v(" DAO, DTO, VO 차이")]),t._v(" "),a("h2",{attrs:{id:"dao-data-access-object-란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dao-data-access-object-란"}},[t._v("#")]),t._v(" DAO(Data Access Object)란?")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("데이터베이스의 데이터에 접근하기 위한 객체이며, 데이터베이스 접근을 하기 위한 로직과 비즈니스 로직을 분리하기 위해 사용합니다.")])]),t._v(" "),a("p",[t._v("사용자는 자신이 필요한 인터페이스를 DAO에게 던지고 DAO는 이 인터페이스를 구현한 객체를 사용자에게 편리하게 사용할 수 있도록 반환합니다. DAO는 데이터베이스와 연결할 Connection까지 설정되어 있는\n경우가 많습니다. 그래서 현재 쓰이는 MyBatis 등을 사용할 경우 커넥션풀까지 제공되고 있기 때문에 DAO를 별도로 만드는 경우는 드뭅니다.")]),t._v(" "),a("h2",{attrs:{id:"dto-data-transfer-object-란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dto-data-transfer-object-란"}},[t._v("#")]),t._v(" DTO(Data Transfer Object)란?")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("계층 간 데이터 교환을 위한 자바 빈즈(Java Beans)입니다. 데이터베이스 레코드의 데이터를 매핑하기 위한 데이터 객체를 말합니다.")])]),t._v(" "),a("p",[t._v("DTO는 보통 로직을 가지고 있지 않고 data와 그 data에 접근을 위한 getter, setter만 가지고 있습니다."),a("br"),t._v("\n정리하자면, DTO는 데이터베이스에서 data를 얻어 Service나 Controller 등으로 보낼 때 사용하는 객체를 말합니다."),a("br"),t._v("\nVO라고 표현하기도 합니다.")]),t._v(" "),a("h2",{attrs:{id:"vo-value-object-란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vo-value-object-란"}},[t._v("#")]),t._v(" VO(Value Object)란?")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("값 오브젝트로써 값을 그 자체를 나타내는 객체입니다.")])]),t._v(" "),a("p",[t._v("자바는 값 타입을 표현하기 위해 불변 클래스를 만들어 사용하는데, 불변이라는 것은 read only 특징을 가집니다. DTO와 VO의 공통점은 넣어진 데이터를 getter를 통해 사용하므로 주 목적은 같으나,\nDTO는 가변적인 성격을 가진 클래스이며(setter 활용) 그에 비해 VO는 불변의 성격을 가졌습니다(생성자 사용)."),a("br"),t._v("\n또한, DTO와 반대로 로직을 포함할 수 있습니다. VO는 서로 다른 이름을 갖는 VO 인스턴스라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체인 것이 핵심입니다.")]),t._v(" "),a("h2",{attrs:{id:"dto-vs-vo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dto-vs-vo"}},[t._v("#")]),t._v(" DTO vs VO")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("-")]),t._v(" "),a("th",[t._v("DTO")]),t._v(" "),a("th",[t._v("VO")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("목적")]),t._v(" "),a("td",[t._v("계층간 데이터 전달")]),t._v(" "),a("td",[t._v("값 자체 표현")])]),t._v(" "),a("tr",[a("td",[t._v("동등성")]),t._v(" "),a("td",[t._v("필드값이 같아도 같은 객체 x")]),t._v(" "),a("td",[t._v("필드값이 같으면 같은 객체")])]),t._v(" "),a("tr",[a("td",[t._v("가변성")]),t._v(" "),a("td",[t._v("setter 존재 시 가변, setter 비 존재 시 불가변")]),t._v(" "),a("td",[t._v("불변")])]),t._v(" "),a("tr",[a("td",[t._v("로직")]),t._v(" "),a("td",[t._v("getter/setter 외의 로직이 필요하지 않음")]),t._v(" "),a("td",[t._v("getter/setter외의 로직이 있어도 무방함")])])])]),t._v(" "),a("h3",{attrs:{id:"참고자료"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),a("ul",[a("li",[t._v("https://m.blog.naver.com/cjhol2107/221757079506")]),t._v(" "),a("li",[t._v("https://maenco.tistory.com/entry/Java-DTO%EC%99%80-VO%EC%9D%98-%EC%B0%A8%EC%9D%B4")]),t._v(" "),a("li",[t._v("https://velog.io/@livenow/Java-VOValue-Object%EB%9E%80")])])])}),[],!1,null,null,null);a.default=e.exports}}]);