(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{310:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"트리-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트리-tree"}},[t._v("#")]),t._v(" 트리 (Tree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("트리는 그래프 중 하나로 그래프의 특징처럼 정점과 간선으로 이루어져 있고, 트리구조로 배열된 일종의 계층적 데이터의 집합입니다.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/50647845/173709044-65b85621-5379-473c-85f4-c9dfe1e88cf7.png",alt:"image"}})]),t._v(" "),a("ul",[a("li",[t._v("트리로 이루어진 집합을 숲이라고 합니다.")]),t._v(" "),a("li",[t._v("일반 배열에서 삽입이나 삭제를 하는데 O(N)의 시간이 걸리며 배열의 첫번째 원소에 삽입하는 경우 나머지 모든 요소들을 한 칸씩 뒤로 미뤄야 하므로 최악의 시간 복잡도 O(N)이 나옵니다.")]),t._v(" "),a("li",[t._v("하지만, 트리는 편향 트리가 아닌 이상 일반적인 트리에서는 O(log N) 정도의 시간으로 줄여집니다.")])]),t._v(" "),a("h2",{attrs:{id:"트리의-주요-구성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트리의-주요-구성"}},[t._v("#")]),t._v(" 트리의 주요 구성")]),t._v(" "),a("ul",[a("li",[t._v("루트 노드, 내부 노드, 리프 노드 등으로 구성됩니다.")]),t._v(" "),a("li",[t._v("루트 노드(root node) : 가장 우위에 있는 노드를 뜻하며, 0개 이상의 자식 노드를 가지고 있습니다. 보통의 트리 탐색 문제에서 루트 노드를 중심으로 탐색하면 문제가 쉽게 풀리는 경향이 있습니다.")]),t._v(" "),a("li",[t._v("내부 노드(internal node) : 루트와 리프를 제외한 노드로, 다른 용어로 끝이 아닌 노드(non-terminal node)라고 합니다.")]),t._v(" "),a("li",[t._v("단말 노드(leaf node) : 트리의 가장 아랫부분에 위치하는 노드로, 더 이상 뻗어나갈 수 없는 마지막에 위치한 노드입니다.")])]),t._v(" "),a("h2",{attrs:{id:"트리의-용어들"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트리의-용어들"}},[t._v("#")]),t._v(" 트리의 용어들")]),t._v(" "),a("ul",[a("li",[t._v("부모 노드(Parent Node) : 어떤 노드에서 간선으로 연결된 위쪽 노드로, 노드는 1개의 부모를 가진다. 예를 들어 Y의 부모는 X입니다.")]),t._v(" "),a("li",[t._v("형제 노드(Sibling Node) : 같은 부모를 가지는 노드입니다.")]),t._v(" "),a("li",[t._v("조상 : 어떤 노드에서 간선으로 연결된 위쪽 노드 모두를 말합니다.")]),t._v(" "),a("li",[t._v("자손 : 어떤 노드에서 간선으로 연결된 아래쪽 노드 모두를 말합니다.")]),t._v(" "),a("li",[t._v("노드의 레벨(level) : 루트로부터 얼마나 떨어져 있는지에 대한 값입니다. 루트의 레벨은 0이고 루트로부터 간선이 하나씩 아래로 뻗어나갈 때마다 레벨이 1씩 늘어납니다.")]),t._v(" "),a("li",[t._v("노드의 크기(size) : 자신을 포함한 모든 자손 노드의 개수. 예를 들어 X의 크기는 4입니다.")]),t._v(" "),a("li",[t._v("노드의 깊이(depth) : 루트에서 어떤 노드에 도달하기 위해 거쳐야 하는 간선의 수를 말한다. 예를 들어 Y의 깊이는 2입니다.")]),t._v(" "),a("li",[t._v("트리의 차수(degree of tree) : 노드가 갖는 자식의 수를 말하며, 모든 노드의 차수가 n 이하인 트리를 n진 트리라고 합니다. 예를 들어 그림은 모든 노드의 자식이 3개 이하이므로 3진 트리입니다.")]),t._v(" "),a("li",[t._v("트리의 높이(height) : 루트로부터 가장 멀리 떨어진 리프까지의 거리를 말합니다.")]),t._v(" "),a("li",[t._v("서브 트리 : 트리 안에서 다시 어떤 노드를 루트로 정하고 그 자손으로 이루어진 트리를 말합니다.")])]),t._v(" "),a("h2",{attrs:{id:"이진-트리-binarytree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이진-트리-binarytree"}},[t._v("#")]),t._v(" 이진 트리 (BinaryTree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("모든 노드가 2개의 서브 트리를 가지고 있는 트리를 이진트리(Binary Tree)라고 합니다.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/50647845/173710721-b8d3d306-5f3b-4385-a508-375284d8da3a.png",alt:"image"}})]),t._v(" "),a("ul",[a("li",[t._v("이진 트리는 노드가 왼쪽 자식과 오른쪽 자식을 가지며, 각 노드의 자식은 2명 이하만 유지해야 합니다.")]),t._v(" "),a("li",[t._v("일반 트리와는 달리 이진 트리는 노드를 하나도 갖지 않을 수도 있습니다.")]),t._v(" "),a("li",[t._v("일반 트리와는 달리 이진 트리는 서브 트리 간에 순서가 존재합니다. 따라서 왼쪽 서브 트리와 오른쪽 서브 트리를 구별합니다.")])]),t._v(" "),a("h2",{attrs:{id:"이진-트리의-종류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이진-트리의-종류"}},[t._v("#")]),t._v(" 이진 트리의 종류")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/50647845/173714571-a7def4d0-247d-4749-9183-42b03aa408b3.png",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"정이진-트리-full-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정이진-트리-full-binary-tree"}},[t._v("#")]),t._v(" 정이진 트리 (Full Binary Tree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("자식 노드가 0또는 두개인 이진 트리")])]),t._v(" "),a("ul",[a("li",[t._v("각 내부 노드가 두 개의 자식 노드를 갖는 순서화된 트리입니다. (홀수 개의 자식 노드를 가질 수 없습니다.)")])]),t._v(" "),a("h3",{attrs:{id:"완전-이진-트리-complete-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#완전-이진-트리-complete-binary-tree"}},[t._v("#")]),t._v(" 완전 이진 트리 (Complete Binary Tree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("왼쪽에서부터 채워져있는 이진 트리.")])]),t._v(" "),a("ul",[a("li",[t._v("마지막 레벨을 제외하고는 모든 레벨이 완전히 채워져 있으며, 마지막 레벨의 경우 왼쪽부터 채워져 있습니다.")])]),t._v(" "),a("h3",{attrs:{id:"포화-이진-트리-perfect-binary-tree-full-and-complete-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#포화-이진-트리-perfect-binary-tree-full-and-complete-binary-tree"}},[t._v("#")]),t._v(" 포화 이진 트리 (Perfect Binary Tree & Full and Complete Binary Tree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("모든 노드가 꽉 차있는 이진트리")])]),t._v(" "),a("ul",[a("li",[t._v("모든 리프 노드의 레벨이 동일하고 모든 레벨이 가득 채워져 있는 이진 트리를 의미합니다.")])]),t._v(" "),a("h3",{attrs:{id:"균형-이진-트리-balanced-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#균형-이진-트리-balanced-binary-tree"}},[t._v("#")]),t._v(" 균형 이진 트리 (Balanced Binary Tree)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("정의")]),t._v(" "),a("p",[t._v("왼쪽과 오른쪽 노드의 높이 차가 1 이하인 이진트리")])]),t._v(" "),a("ul",[a("li",[t._v("map, set을 구성하는 레드 블랙 트리를 균형 이진 트리 중 하나입니다.")])]),t._v(" "),a("h2",{attrs:{id:"자바에서의-트리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바에서의-트리"}},[t._v("#")]),t._v(" 자바에서의 트리")]),t._v(" "),a("h3",{attrs:{id:"treeset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[t._v("#")]),t._v(" TreeSet")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/50647845/173713980-2e5198b2-0ddb-4884-9c38-0f8cf7925f03.png",alt:"image"}})]),t._v(" "),a("ul",[a("li",[t._v("이진 트리를 기반으로한 Set Collection입니다.")]),t._v(" "),a("li",[t._v("TreeSet에 객체를 저장하면 자동으로 정렬되는데 이진탐색트리처럼 부모 노드값과 비교해 낮으면 왼쪽 자식노드, 높으면 오른쪽 자식 노드에 저장합니다.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TreeSet 생성하기")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" scores "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 값을 삽입하기")]),t._v("\nscores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("87")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 가장 상위의 값을 가져오기")]),t._v("\nscores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pollFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 가장 하위의 값을 가져오기")]),t._v("\nscores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("polLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/50647845/173714042-a8595100-9f6a-465b-9fe8-93d6b3bf9b74.png",alt:"image"}})]),t._v(" "),a("ul",[a("li",[t._v("TreeMap은 이진 트리를 기반으로 한 Map Collection입니다.")]),t._v(" "),a("li",[t._v("TreeSet과의 차이점은 키와 값이 저장된 Map.Entry를 저장한다는 점이며, 키값을 비교해서 자동으로 정렬됩니다.")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TreeMap 생성하기")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" treeMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 값을 삽입하기")]),t._v("\ntreeMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"banana"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 가장 상위의 키값을 가져오기")]),t._v("\nscores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("firstKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 가장 하위의 키값을 가져오기")]),t._v("\nscores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lastKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"참고자료"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),a("ul",[a("li",[t._v("주홍철."),a("em",[t._v("면접을 위한 CS 전공지식 노트")]),t._v(".서울:길벗,2022.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeSet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oracle Doc : TreeSet"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Oracle Doc : TreeMap"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/WooVictory/Ready-For-Tech-Interview",target:"_blank",rel:"noopener noreferrer"}},[t._v("WooVictory"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/HyeminNoh/Tech-Stack",target:"_blank",rel:"noopener noreferrer"}},[t._v("HyeminNoh"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://sean-ma.tistory.com/24",target:"_blank",rel:"noopener noreferrer"}},[t._v("sean-ma"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://dahye-jeong.gitbook.io/java/java/undefined/2020-03-24-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("dahye-jeong"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);