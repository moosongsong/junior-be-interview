(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{350:function(a,e,t){"use strict";t.r(e);var s=t(13),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"해시코드와-이퀄"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#해시코드와-이퀄"}},[a._v("#")]),a._v(" 해시코드와 이퀄")]),a._v(" "),e("h2",{attrs:{id:"객체-비교-equals-와"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#객체-비교-equals-와"}},[a._v("#")]),a._v(" 객체 비교(equals()와 ==)")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183319271-43a4d2c7-b1e9-4c30-ac9e-34aeb753cb72.PNG",alt:"equals"}}),e("br"),a._v("\nequals()는 매개변수로 들어오는 객체와 자신의 객체가 같은지 비교하는 기능을 합니다. 이 메소드의 내부를 보면 연산자인 == 과 동일한 결과를 리턴합니다. 오로지 참조값(객체의 주소값)이 같은지 확인하는\n것입니다.")]),a._v(" "),e("p",[a._v("자바에서는 두 객체를 동등비교 할때 equals() 메소드를 흔히 사용합니다. equals()메소드는 두 객체를 비교해서 논리적으로 동등하면 true를 리턴하고 그렇지 않으면 false를 리턴해줍니다. 여기서\n논리적으로 동등하다는 것은 둘의 참조값이 다르더라도 객체 내부 value는 같다는 것을 의미합니다.")]),a._v(" "),e("p",[a._v("equals()를 재정의한 대표적인 예로는 String class가 있습니다. String class는 equals() 메소드를 재정의해서 번지비교가 아닌 문자열값을 비교합니다.")]),a._v(" "),e("p",[a._v("정리하자면,")]),a._v(" "),e("ul",[e("li",[a._v("동일성 비교는 == 비교로서, 객체 인스턴스의 주소 값을 비교하는 것입니다.")]),a._v(" "),e("li",[a._v("등등성 비교는 equals()를 사용해서 객체 내부의 값을 비교하는 것입니다.")]),a._v(" "),e("li",[a._v("primitive data type의 경우는 == 를 통해 값 비교가 가능합니다.")])]),a._v(" "),e("h3",{attrs:{id:"primitive-타입이-비교를-통해-값-비교가-가능한-이유"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primitive-타입이-비교를-통해-값-비교가-가능한-이유"}},[a._v("#")]),a._v(" primitive 타입이 == 비교를 통해 값 비교가 가능한 이유")]),a._v(" "),e("p",[a._v("변수 선언부는 Java Runtime Data Area의 Stack 영역에 저장이 되고, 해당 변수에 저장된 상수는 Runtime Constant Pool에 저장되어있습니다. Stack의 변수 선언부는 해당\nRuntime Contant Pool의 주소값을 가지게 되고, 만약 다른 변수도 같은 상수를 저장하고 있다면, 이 다른 변수도 같은 Runtime Contant Pool의 주소값을 가지게 때문에 엄밀히 말하면\nprimitive type 역시 주소값 비교가 되는 것입니다.")]),a._v(" "),e("h2",{attrs:{id:"equals의-재정의"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equals의-재정의"}},[a._v("#")]),a._v(" equals의 재정의")]),a._v(" "),e("p",[a._v("equals는 객체의 값이 일치한지 비교하기 위해 사용한다고 했습니다. 그렇다면 예제로 Car 클래스의 equals를 재정의 해보겠습니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183320982-50a2d4a3-82d9-44f4-9886-0ff55b491a34.PNG",alt:"예제Car클래스"}}),e("br"),a._v("\nCar클래스에 equals만 재정의 해두었습니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183320984-65bfc169-4c92-4f39-90bf-1f6f411011cd.PNG",alt:"car비교1"}}),e("br"),a._v("\nCar 객체의 name이 같은 car1, car2 객체는 논리적으로 같은 객체로 판단되었습니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183320987-a23f3e6f-9e8d-4563-bd74-665250958655.PNG",alt:"car비교2"}}),e("br"),a._v("\nCar 객체 2개를 List"),e("Car",[a._v(" cars에 넣어주었으니 결과는 2가 나올것입니다.")])],1),a._v(" "),e("p",[a._v("만약, Collection에 중복되지 않는 Car 객체만 넣으라는 요구사항이 추가되었다고 가정해봅시다."),e("br"),a._v("\n요구사항을 만족시키기 위해 List 대신 Set을 사용했습니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183320990-8131d9fe-f993-46ac-a51a-7cfb1078f939.PNG",alt:"car비교3"}}),e("br"),a._v("\n추가된 두 Car객체의 이름이 같아서 논리적으로 같은 객체라 판단하고 size가 1이 나올 것으로 예상했지만, 결과는 2가 나왔습니다.")]),a._v(" "),e("p",[a._v("이는 haseCode를 equals와 함께 재정의하지 않아서 발생한 문제입니다.")]),a._v(" "),e("h2",{attrs:{id:"hasecode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hasecode"}},[a._v("#")]),a._v(" haseCode")]),a._v(" "),e("p",[a._v("객체 해시코드란 객체를 식별하는 하나의 정수값을 말합니다. Object의 hashCode() 메소드는 객체의 메모리 번지를 이용해서 해시코드를 만들어 리턴하기 때문에 객체 마다 다른 값을 가지고 있습니다.")]),a._v(" "),e("p",[a._v("객체의 값을 동등성 비교시 hashCode()를 오버라이딩할 필요성이 있는데, 컬렉션 프레임워크에서 HashSet, HashMap, HashTable은 객체가 논리적으로 같은지 비교할 때 다음 과정을 거칩니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183321705-4640d33c-01e9-47fc-9c40-f7d87a870b9c.PNG",alt:"논리적비교단계"}}),e("br"),a._v("\nhashCode() 메소드를 실행해서 리턴된 해시코드 값이 같은 지 확인합니다. 해시 코드 값이 다르면 다른 객체로 판단하고 해시 코드 값이 같으면 equals()로 다시 비교합니다. 이렇게 두 메소드가 모두\ntrue 가 나오면 동등객체로 판단합니다. 즉, 해시코드 값이 다른 엔트리끼리는 동치성 비교를 시도조차 하지 않습니다.")]),a._v(" "),e("h2",{attrs:{id:"java-hashtable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-hashtable"}},[a._v("#")]),a._v(" Java HashTable")]),a._v(" "),e("p",[a._v("equals와 hashcode 메서드를 이해하기 위해서 자바에서 HashTable이 작동하는 원리를 간단히 살펴보겠습니다."),e("br"),a._v("\n(HashTable 뿐만 아니라 HashMap, HashSet 모두 아래의 동작 원리와 동일합니다.)")]),a._v(" "),e("p",[a._v("HashTable은 <key,value> 형태로 데이터를 저장합니다."),e("br"),a._v("\n이 때 해시 함수(Hash Function)을 이용하여 key값을 기준으로 고유한 식별값인 해시값을 만듭니다. (hashcode가 해시값을 만드는 역할을 합니다.)"),e("br"),a._v("\n그리고 이 해시값을 버킷(Bucket)에 저장합니다.")]),a._v(" "),e("p",[a._v("하지만 HashTable 크기는 한정적이기 때문에 같은 서로 다른 객체라 하더라도 같은 해시값을 갖게 될 수도 있습니다."),e("br"),a._v("\n이것을 **해시 충돌(Hash Collisions)*"),e("em",[a._v("이라고 합니다."),e("br"),a._v("\n이런 경우 아래와 같이 해당 버킷(Bucket)에 LinkedList 형태로 객체를 추가합니다."),e("br"),a._v("\n(")]),a._v(" 참고로 java8인가 9버전부터 LinkedList 아이템의 갯수가 8개 이상으로 넘어가면 TreeMap 자료구조로 저장된다고 합니다.)")]),a._v(" "),e("p",[a._v("이처럼 같은 해시값의 버킷 안에 다른 객체가 있는 경우 equals 메서드가 사용됩니다.")]),a._v(" "),e("p",[a._v("HashTable에 put 메서드로 객체를 추가하는 경우")]),a._v(" "),e("ul",[e("li",[a._v("값이 같은 객체가 이미 있다면(equals()가 true) 기존 객체를 덮어쓴다.")]),a._v(" "),e("li",[a._v("값이 같은 객체가 없다면(equals()가 false) 해당 entry를 LinkedList에 추가한다.")])]),a._v(" "),e("p",[a._v("HashTable에 get 메서드로 객체를 조회하는 경우")]),a._v(" "),e("ul",[e("li",[a._v("값이 같은 객체가 있다면 (equals()가 true) 그 객체를 리턴한다.")]),a._v(" "),e("li",[a._v("값이 같은 객체가 없다면(equals()가 false) null을 리턴한다.")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183323445-fce95b58-a6f3-48ad-850e-72b70f2286ec.PNG",alt:"해시테이블"}}),e("br"),a._v("\n위 그림에서 세 객체 (Entry<K1,V1>, Entry<K2,V2>, Entry<K3,V3>)는 서로 같은 해시값을 갖습니다. 따라서 hashcode() 메서드는 같은 값을 리턴합니다. 하지만 서로 값이 다른\n객체이기 때문에 equals() 메서드는 false를 리턴합니다.")]),a._v(" "),e("h2",{attrs:{id:"hasecode-재정의"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hasecode-재정의"}},[a._v("#")]),a._v(" haseCode 재정의")]),a._v(" "),e("p",[a._v("앞서 봤던 예제에서는 Car 클래스의 hashCode 메소드가 재정의 되지 않아서, Object 클래스의 hashCode 메서드가 사용되었습니다."),e("br"),a._v("\nObject 클래스의 haseCode 메서드는 객체의 고유한 주소 값을 int 값으로 변환하기 때문에 객체마다 다른 값을 리턴합니다. 따라서 두 개의 Car 객체는 서로 다른 haseCode 메서드의 리턴 값으로\n인해 다른 객체로 판단된 것입니다.")]),a._v(" "),e("p",[a._v("그러면 문제를 해결하기 위해 Car 클래스에 hashCode 매서드를 재정의 해보겠습니다.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/79966015/183323452-5c37fcd1-1e71-4a72-bb10-b31a4ef6114f.PNG",alt:"Car_hasecode"}}),e("br"),a._v("\nintellij 의 Generate 기능을 사용했더니 Objects.hash 메서드를 호출하는 로직으로 hashCode 메서드가 재정의 됐습니다. Objects.hash 메서드는 hashCode 메서드를 재정의하기\n위해 간편히 사용할 수 있는 메서드이지만 속도가 느립니다. 인자를 담기 위한 배열이 만들어지고 인자 중 기본 타입이 있다면 박싱과 언박싱도 거쳐야 하기 때문입니다.")]),a._v(" "),e("p",[a._v("성능에 아주 민감하지 않은 대부분의 프로그램은 간편하게 Objects.hash 메서드를 사용해서 hashCode 메서드를 재정의해도 문제 없습니다. 민감한 경우에는 직접 재정의해주는 게 좋은데, 관련\n정보는 "),e("a",{attrs:{href:"https://www.baeldung.com/java-hashcode",target:"_blank",rel:"noopener noreferrer"}},[a._v("Guide to hashCode() in Java"),e("OutboundLink")],1),a._v(" 이 글을 참고하시면 됩니다.")]),a._v(" "),e("h2",{attrs:{id:"정리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정리"}},[a._v("#")]),a._v(" 정리")]),a._v(" "),e("p",[a._v("hashcode()를 재정의 하지 않으면 같은 값 객체라도 해시값이 다를 수 있습니다. 따라서 HashTable에서 해당 객체가 저장된 버킷을 찾을 수 없는 경우가 발생합니다."),e("br"),a._v("\n반대로 equals()를 재정의하지 않으면 hashcode()가 만든 해시값을 이용해 객체가 저장된 버킷을 찾을 수는 있지만 해당 객체가 자신과 같은 객체인지 값을 비교할 수 없기 때문에 null을 리턴하게 됩니다.\n따라서 역시 원하는 객체를 찾을 수 없습니다.")]),a._v(" "),e("p",[a._v("이러한 이유로 객체의 정확한 동등 비교를 위해서는 (특히 Hash 관련 컬렉션 프레임워크를 사용할때!) Object의 equals() 메소드만 재정의하지 말고 hashCode()메소드도 재정의해서 논리적 동등\n객체일경우 동일한 해시코드가 리턴되도록 해야합니다.")]),a._v(" "),e("h3",{attrs:{id:"참고자료"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[a._v("#")]),a._v(" 참고자료")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://jisooo.tistory.com/entry/java-hashcode%EC%99%80-equals-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C",target:"_blank",rel:"noopener noreferrer"}},[a._v("지수의 콘텐츠 기록장"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("https://tecoble.techcourse.co.kr/post/2020-07-29-equals-and-hashCode/")])])])}),[],!1,null,null,null);e.default=r.exports}}]);