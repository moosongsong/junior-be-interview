(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{318:function(t,s,a){"use strict";a.r(s);var v=a(13),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http-버전"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-버전"}},[t._v("#")]),t._v(" HTTP 버전")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("HTTP란")]),t._v(" "),s("p",[t._v("애플리케이션 계층으로서 웹 서비스 통신에 사용됩니다. HTTP/1.0에서 시작하여 지금은 HTTP/3을 사용합니다.")])]),t._v(" "),s("h2",{attrs:{id:"http-1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),s("ul",[s("li",[t._v("한 연결 당 하나의 요청을 처리하도록 설계되었습니다.")]),t._v(" "),s("li",[t._v("문제점 : 서버로부터 파일을 가져올 때마다 TCP의 3-way handshake를 계속 진행하기 때문에, RTT 증가를 불러오게 되었습니다.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("RTT")]),t._v(" "),s("p",[t._v("패킷이 목적지에 도달하고 나서 다시 출발지로 돌아오기까지 걸리는 시간이며 패킷 왕복 시간")])]),t._v(" "),s("h3",{attrs:{id:"rtt-증가를-해결하기-위한-방법"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rtt-증가를-해결하기-위한-방법"}},[t._v("#")]),t._v(" RTT 증가를 해결하기 위한 방법")]),t._v(" "),s("ul",[s("li",[t._v("이미지 스플리팅\n:  많은 이미지가 합쳐 있는 하나의 이미지를 다운로드받고, 이를 기반으로 background-image의 position을 이용하여 이미지를 표기하는 방법입니다.")]),t._v(" "),s("li",[t._v("코드 압축\n: 개행 문자,빈칸을 없애고 코드를 압축해서 코드의 크기를 최소화하는 방법입니다.")]),t._v(" "),s("li",[t._v("이미지 Base64 인코딩 활용\n: 이미지 파일을 64진법으로 이루어진 문자열로 인코딩하는 방법입니다. 이 방법을 사용하면 서버와의 연결을 열고 이미지에 대해 서버에 HTTP 요청을 할 필요가 없습니다.")])]),t._v(" "),s("h2",{attrs:{id:"http-1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),s("ul",[s("li",[t._v("한번 TCP를 초기화 한 이후에 keep-alive라는 옵션으로 여러 개의 파일을 송수신할 수 있습니다.")]),t._v(" "),s("li",[t._v("문제점 : 문서 안에 포함된 다수의 리소스(이미지, css/script 파일)를 처리하려면 요청할 리소스 개수에 비례해서 대기 시간이 길어집니다.")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("HTTP/1.0에서도 keep-alive가 있었지만, 표준화가 되어있지 않았습니다."),s("br"),t._v("\nHTTP/1.1부터 표준화가 되어 기본 옵션으로 설정되었습니다.")])]),t._v(" "),s("h3",{attrs:{id:"http-1-1-성능저하의-원인"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-성능저하의-원인"}},[t._v("#")]),t._v(" HTTP/1.1 성능저하의 원인")]),t._v(" "),s("ul",[s("li",[t._v("HOL Blocking(Head Of Line Blocking)\n: 네트워크에서 같은 큐에 있는 패킷이 그 첫 번째 패킷에 의해 지연될 때 발생하는 성능 저하 현상을 말합니다.")]),t._v(" "),s("li",[t._v("무거운 헤더구조\n: HTTP/1.1의 헤더에는 쿠키 등 많은 메타데이터가 들어 있고 압축이 되지 않아 무거웠습니다.")])]),t._v(" "),s("h2",{attrs:{id:"http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/2는 SPDY 프로토콜에서 파생된 HTTP/1.x 보다 지연 시간을 줄이고 응답시간을 더 빠르게 할 수 있습니다.")]),t._v(" "),s("li",[t._v("멀티플렉싱, 헤더 압축, 서버 푸시, 요청의 우선순위 처리를 지원하는 프로토콜입니다.")])]),t._v(" "),s("h3",{attrs:{id:"멀티플렉싱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#멀티플렉싱"}},[t._v("#")]),t._v(" 멀티플렉싱")]),t._v(" "),s("ul",[s("li",[t._v("여러개의 스트림을 사용하여 송수신 한다는 것을 말합니다.")]),t._v(" "),s("li",[t._v("특정 스트림의 패킷이 손실되어도 해당 스트림에만 영향을 미치고 나머지 스트림은 정상작동합니다.")]),t._v(" "),s("li",[t._v("병렬로 여러 요청을 받거나 응답할 수 있어, HOL Blocking을 해결할 수 있습니다.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("스트림")]),t._v(" "),s("p",[t._v("시간이 지남에 따라 사용할 수 있게 되는 일련의 데이터 요소를 가리키는 데이터 흐름")])]),t._v(" "),s("h3",{attrs:{id:"헤더-압축"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#헤더-압축"}},[t._v("#")]),t._v(" 헤더 압축")]),t._v(" "),s("p",[t._v("허프만 코딩 압축 알고리즘을 사용하는 HPACK 압축 형식을 사용했습니다.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("허프만 코딩")]),t._v(" "),s("p",[t._v("문자열을 문자 단위로 쪼개 빈도수를 세어 빈도가 높은 정보는 적은 비트 수를 사용하여 표현하고, 빈도가 낮은 정보는 비트 수를 많이 사용하여 표현해서 전체 데이터의 표현에 필요한 비트양을 줄이는 원리입니다.")])]),t._v(" "),s("h3",{attrs:{id:"서버-푸시"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#서버-푸시"}},[t._v("#")]),t._v(" 서버 푸시")]),t._v(" "),s("p",[t._v("HTTP/2는 클라이언트 요청 없이 서버가 바로 리소스를 푸시할 수 있습니다. 예를 들어, html에는 css나 js파일이 포함되어 있는데, 클라이언트가 html을 보내면 그 안에 들어있던 css 파일을 서버에서\n푸시하여 클라이언트의 css요청 전에 먼저 주는 방식입니다.")]),t._v(" "),s("h2",{attrs:{id:"http-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),s("ul",[s("li",[t._v("TCP위에서 돌아가는 HTTP/2와 달리, HTTP3는 QUIC라는 계층 위에서 돌아가며, UDP기반으로 돌아갑니다.")]),t._v(" "),s("li",[t._v("멀티플렉싱을 가지고 있으며 초기 연결 설정 시 지연 시간 감소라는 장점이 있습니다.")])]),t._v(" "),s("h3",{attrs:{id:"초기-연결-설정-시-지연-시간-감소"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#초기-연결-설정-시-지연-시간-감소"}},[t._v("#")]),t._v(" 초기 연결 설정 시 지연 시간 감소")]),t._v(" "),s("p",[t._v("QUIC은 TCP를 사용하지 않기 때문에 3-way handshake 과정을 거치지 않습니다. 그 때문에 첫 연결 설정에 1-RTT만 소요됩니다. 참고로, QUIC은 순방향 오류 수정 메커니즘(FEC, Forword\nError Correction)이 적용되어 낮은 패킷 손실률을 자랑합니다.")]),t._v(" "),s("h3",{attrs:{id:"참고자료"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#참고자료"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),s("ul",[s("li",[t._v("주홍철."),s("em",[t._v("면접을 위한 CS 전공지식 노트")]),t._v(".서울:길벗,2022.")])])])}),[],!1,null,null,null);s.default=_.exports}}]);